import random
import os

class Game:
    def __init__(self, size=20):
        self.size = size
        self.grid = [['.' for _ in range(size)] for _ in range(size)]
        self.ship = Ship(self)
        self.planet = Planet(self)
        self.obstacles = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
        self.generate_obstacles()
        self.running = True

    def generate_obstacles(self):
        self.obstacles = [Obstacle(self) for _ in range(random.randint(2, 4))]

    def display(self):
        os.system('cls' if os.name == 'nt' else 'clear')  # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ö–æ–¥–æ–º
        for row in self.grid:
            print(" ".join(row))

    def update_grid(self):
        self.grid = [['.' for _ in range(self.size)] for _ in range(self.size)]
        
        self.planet.place_on_grid()
        for obstacle in self.obstacles:
            obstacle.place_on_grid()
        self.ship.place_on_grid()

    def check_collision(self):
        ship_x, ship_y = self.ship.position
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è–º–∏
        for obstacle in self.obstacles:
            if obstacle.check_collision(ship_x, ship_y):
                print("\nüö® –ö–æ—Ä–∞–±–µ–ª—å —Ä–æ–∑–±–∏–≤—Å—è –æ–± –ø–µ—Ä–µ—à–∫–æ–¥—É! –ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞. üöÄüí•")
                self.running = False
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –ø–ª–∞–Ω–µ—Ç—ã
        if self.planet.check_landing(ship_x, ship_y):
            print("\nüéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø–æ—Å–∞–¥–∏–ª–∏ –∫–æ—Ä–∞–±–µ–ª—å –Ω–∞ –ø–ª–∞–Ω–µ—Ç—É! üåçüöÄ")
            self.running = False

    def run(self):
        while self.running:
            self.update_grid()
            self.display()
            self.ship.move()
            self.check_collision()
        print("–ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

class Ship:
    def __init__(self, game):
        self.game = game
        self.position = (random.randint(0, game.size - 1), random.randint(0, game.size - 1))

    def place_on_grid(self):
        x, y = self.position
        self.game.grid[y][x] = 'S'

    def move(self):
        try:
            x, y = map(int, input("\n–í–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è —Ä—É—Ö—É (x y): ").split())
            if 0 <= x < self.game.size and 0 <= y < self.game.size:
                self.position = (x, y)
            else:
                print("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ä—É—Ö! –í–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ –º–µ–∂–∞—Ö –ø–æ–ª—è.")
        except ValueError:
            print("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥! –í–≤–µ–¥—ñ—Ç—å –¥–≤–∞ —á–∏—Å–ª–∞.")

class Planet:
    def __init__(self, game):
        self.game = game
        self.size = random.randint(4, 5)
        self.x = random.randint(0, game.size - self.size)
        self.y = random.randint(0, game.size - self.size)

    def place_on_grid(self):
        for i in range(self.size):
            for j in range(self.size):
                self.game.grid[self.y + i][self.x + j] = 'P'

    def check_landing(self, x, y):
        return self.x - 1 <= x <= self.x + self.size and self.y - 1 <= y <= self.y + self.size

class Obstacle:
    def __init__(self, game):
        self.game = game
        self.size = random.randint(1, 3)
        while True:
            self.x = random.randint(0, game.size - self.size)
            self.y = random.randint(0, game.size - self.size)
            if not self._is_too_close_to_other_obstacles():
                break

    def _is_too_close_to_other_obstacles(self):
        for obstacle in self.game.obstacles:
            if abs(self.x - obstacle.x) < 3 and abs(self.y - obstacle.y) < 3:
                return True
        return False

    def place_on_grid(self):
        for i in range(self.size):
            for j in range(self.size):
                self.game.grid[self.y + i][self.x + j] = 'X'

    def check_collision(self, x, y):
        return self.x - 1 <= x <= self.x + self.size and self.y - 1 <= y <= self.y + self.size

if __name__ == "__main__":
    game = Game()
    game.run()
